@page "/appointments/{UrlID?}"
@attribute [Authorize]

@inject Radzen.DialogService DialogService
@using job_coaching_blazor_server.Data

@using AppointmentModel = job_coaching_blazor_server.Data.Models

@using job_coaching_blazor_server.Data.Shared

@using job_coaching_blazor_server.Pages.Shared

@using job_coaching_blazor_server.Services
@inject UserPostService userPostService

@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider



<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                 TextProperty="Text" SelectedIndex="2"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@code {
    [Parameter]
    public string? UrlID { get; set; }

    protected override async void OnInitialized()
    {
        // TODO: check if UrlID is valid or not
        Console.WriteLine(UrlID);
        var _appointments = userPostService.GetAppointments(UrlID);
        foreach (AppointmentModel.Appointment _ap in _appointments)
        {
            appointments.Add(new Appointment
            {
                Start = _ap.AppointmentDateTime,
                End = _ap.AppointmentDurationEnd,
                Text = _ap.HelperEmail + ": " +  _ap.Text,
            });
        }
    }

    RadzenScheduler<Appointment> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>
    {
        //new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        //new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        //new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        //new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        //new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        //new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        //new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        if (args.View.Text != "Year")
        {
            Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {

                appointments.Add(data);

                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                AppointmentModel.Appointment appointmentModel = new AppointmentModel.Appointment
                {
                    UrlId = UrlID,
                    Text = data.Text,
                    HelperEmail = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value,
                    AppointmentDateTime = args.Start,
                    AppointmentDurationEnd = args.End
                };
                userPostService.AddAppointment(appointmentModel);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {

        await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        //if (args.Data.Text == "Birthday")
        //{
        //    args.Attributes["style"] = "background: red";
        //}
    }

}
